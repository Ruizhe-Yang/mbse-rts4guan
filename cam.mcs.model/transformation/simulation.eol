//var system : MCS_system;
//"Start...".println();
//multiple_runs(1);
//"Over.".println();

operation multiple_runs(N : Integer){
	for (i in 1.to(N)){
		("Simulation "+i+":").println();
		system = new MCS_system;
		system.initParameter();
		system.initTasks();
		system.initCore();
//		system.restart();
		run();
		recordResult("");
	}
}


operation MCS_system initParameter(){
	var parameter = new Parameter;
	parameter.period_number = 3;
	parameter.task_number = 10;
	parameter.CPU_rate = 0.5;
	parameter.high_task_number = 5;
	parameter.critical_section_number = 1;
	parameter.init_status = Status#HIGH;
	parameter.max_deadline_limit = 5000;
	parameter.min_deadline_limit = 500;
	parameter.max_cstime_precent = 0.25;
	parameter.high_vs_low = 1.5;
	parameter.LOtaskcount = 0;
	parameter.LO_LOtaskcount = 0;
	parameter.LOtaskcount_scheduled = 0;
	parameter.disturbance_open = false;
	parameter.print_process = false;
	parameter.print_result = false;
	self.parameter = parameter;
}

operation run(){
	for(i in 1.to(system.parameter.max_running_time)) {
		updateHanging();
		handle();
		tick(i);
		counter();
		processPrint();
	}
}

operation handle(){
	modeSwitch();
	var taskShouldStart = HasTaskShouldStart();
	if (not (system.core.IsOpen() and IsNoTaskRunning() and (not taskShouldStart))){
		if (system.core.IsOpen() and taskShouldStart){
			var task = getWillStartTask();
			task.startNewTask();
			executeCurrentTask();
		}
		else if (IsTaskRunning() and taskShouldStart){
			var task = getWillStartTask();
			preempt(task);
			executeCurrentTask();
		}
		else if (IsTaskRunning() and (not taskShouldStart)){
			executeCurrentTask();
		}
		if (IsCurrentTaskOver()){
			releaseCurrentTask();
		}
		else if (IsCurrentTaskShouldHang()){
			hangCurrentTask();
		}
	}
}

operation recordResult(name : String){
	var result = new Result;
	result.name = name;
	result.no_error = (not system.core.error);
	result.error_time = system.core.error_time;
	result.actual_occupancy_rate = 1.0*system.core.occupy_time/(system.parameter.max_running_time-1);
	result.low_occupancy_rate = 1.0*system.core.occupy_time_low/system.core.occupy_time;
	result.high_occupancy_rate = 1.0*system.core.occupy_time_high/system.core.occupy_time;
	result.LOtask_scheduled_rate = 1.0*(system.parameter.LOtaskcount_scheduled-system.parameter.LO_LOtaskcount)/system.parameter.LOtaskcount;
	result.HI_exec_rate_low = 1.0*system.core.HImode_occupy_time_low/system.core.HImode_occupy_time;
	system.results.add(result);
	result.PrintResult(name);
}

operation MCS_system getDisturbance(){
	var disturbance = new Disturbance;
	disturbance.open = system.parameter.disturbance_open;
	disturbance.time = system.parameter.max_deadline*(2.0+getRandomDecimal()).getInteger();
	self.disturbance = disturbance;
}

operation MCS_system initCore(){
	var core = new Core;
	core.time = 1;
	core.occupy_time = 0;
	core.occupy_time_low = 0;
	core.occupy_time_high = 0;
	core.HImode_occupy_time = 0;
	core.HImode_occupy_time_low = 0;
	core.error = false;
	core.error_time = 0;
	core.current_task = null;
	self.core = core;
}

operation modeSwitch(){
	if (system.disturbance.open and disturbance()){
		changeSystemStatus("LOW", "MCP");
	}
	if (system.disturbance.open and system.status=Status#MCP){
		changeSystemStatus("MCP", "HIGH");
	}
}

operation MCS_system initTasks(){
	getRandomTasks();
	getCriticalSection();
	matchCriticalSection();
	matchCriticalSectionCriticality();
	getCriticalSectionsCeilingPriority();
	self.status = system.parameter.init_status;
	self.parameter.max_deadline = getMAX_DEADLINE();
	self.parameter.max_running_time = self.parameter.max_deadline * self.parameter.period_number;
	self.getDisturbance();
}

operation MCS_system restart(){
	self.core.time = 1;
	self.core.occupy_time = 0;
	self.core.occupy_time_low = 0;
	self.core.occupy_time_high = 0;
	self.core.HImode_occupy_time = 0;
	self.core.HImode_occupy_time_low = 0;
	self.core.error = false;
	self.core.error_time = 0;
	self.core.current_task = null;
	self.status = system.parameter.init_status;
	self.disturbance.open = system.parameter.disturbance_open;
	self.parameter.max_running_time = self.parameter.max_deadline * self.parameter.period_number;
	for (task in self.tasks){
		task.state = WorkingState#unstart;
		task.getCstime();
		task.getTimeLeft();
		task.IsMandatory = false;
		task.dynamic_priority = task.priority;
	}
	for (critical_section in self.critical_sections){
		critical_section.locked = false;
		getCriticalSectionsCeilingPriority();
	}
}

operation disturbance(){
	return (system.core.time = system.disturbance.time);
}

operation changeSystemStatus(source:String, target:String){
	if (source='LOW' and target='MCP'){
		system.status = Status#MCP;
		for (task in system.tasks){
			if (task.criticality=Criticality#hi){
				task.cstime = (task.cstime * system.parameter.high_vs_low).getInteger();
				if (task.wcet_low-task.timeleft >= task.cstime and task.cstime<>0){
					task.timeleft =	(task.timeleft * system.parameter.high_vs_low).getInteger();
				}
				else {
					task.timeleft += task.wcet_high - task.wcet_low;
				}
			}
		}
	}
	else if (source='MCP' and target='HIGH'){
		if (system.core.isNotLowTaskRunning()){
			var HangingList = system.tasks.select(e|e.state=WorkingState#hanging);
			for (task in HangingList){
				if (not(task.timeleft=task.wcet_low or task.timeleft+task.cstime<=task.wcet_low)){
					return null;
				}
			}
			system.status = Status#HIGH;
		}
	}
}

operation Core isNotLowTaskRunning(){
	return (self.current_task=null or self.current_task.criticality<>Criticality#hi);
}

operation Task lock(){
	if (self.critical_section <> null){
		self.critical_section.locked = true;
	}
}

operation Task unlock(){
	if (self.critical_section <> null){
		self.critical_section.locked = false;
	}
}

operation counter(){
	if (system.core.current_task <> null){
		system.core.occupy_time++;
		if (system.core.current_task.criticality = Criticality#lo){
			system.core.occupy_time_low++;
			if (system.status = Status#HIGH){
				system.core.HImode_occupy_time++;
				system.core.HImode_occupy_time_low++;
			}
			
		}
		else{
			system.core.occupy_time_high++;
			if (system.status = Status#HIGH){
				system.core.HImode_occupy_time++;
			}
		}
	}
}

operation getMAX_DEADLINE(){
	for (task in system.tasks){
		if(system.tasks.count(e|e.deadline > task.deadline)=0){
			return task.deadline;
		}
	}
}

operation Task updateDynamicPriority(){
	if (self.critical_section <> null and system.core.current_task.getTaskWCET() - system.core.current_task.timeleft < system.core.current_task.cstime){
		self.dynamic_priority = self.critical_section.ceiling_priority;
		self.lock();
	}
}

operation updateHanging(){
	for (task in system.tasks){
		if(system.core.time.mod(task.period) = 0){
			if (task.criticality = Criticality#lo and (system.status = Status#MCP or system.status = Status#HIGH)){
					system.parameter.LOtaskcount++;
			}
			if (task.criticality = Criticality#lo and system.status = Status#LOW){
					system.parameter.LO_LOtaskcount++;
			}
			if (task.state = WorkingState#unstart){
				task.state = WorkingState#hanging;
				
			}
			else{
				if (system.status = Status#LOW){
					task.getTimeLeft();
					system.core.error = true;
					system.core.error_time = system.core.time;
				}
				else if(system.status = Status#MCP or system.status = Status#HIGH){
					if (task.critical_section<>null and task.criticality = Criticality#lo and task.wcet_low - task.timeleft < task.cstime){
						task.critical_section.locked = false;
					}
					task.getTimeLeft();
					if (task.criticality = Criticality#hi){
						system.core.error = true;
						system.core.error_time = system.core.time;
					}
				}
			}
		}
	}
}

operation preempt(task){
	if ((system.status=Status#HIGH) and isDoubleLow(system.core.current_task, task) and (task.priority > system.core.current_task.dynamic_priority)){
		if (system.core.current_task.wcet_low-system.core.current_task.timeleft>=system.core.current_task.cstime){
			task.IsMandatory = false;
			system.core.current_task.hanging();
			task.startNewTask();
		}
		return null;
	}
	if ((task.IsMandatory=true) or (task.priority > system.core.current_task.dynamic_priority)){
		task.IsMandatory = false;
		system.core.current_task.hanging();
		task.startNewTask();
	}
}

operation isDoubleLow(taskC, taskNew){
	return ((taskC<>null)and(taskNew<>null)and(taskC.criticality=Criticality#lo)and(taskNew.criticality=Criticality#lo));
}

operation Task hanging(){
	self.state = WorkingState#hanging;
}

operation Task startNewTask(){
	system.core.current_task = self;
	self.state = WorkingState#working;
	self.IsMandatory = false;
	self.updateDynamicPriority();
}

operation IsCurrentTaskOver(){
	return (system.core.current_task<>null and system.core.current_task.timeleft = 0);
}

operation HasTaskShouldStart(){
	return (getWillStartTask()<>null);
}

operation getWillStartTask(){
	var willStartTasks = system.tasks.select(e|e.state = WorkingState#hanging);
	if (willStartTasks.size()=0){
		return null;
	}
	if (system.status = Status#LOW){
		if (willStartTasks.size()=1){ 
			return willStartTasks[0];
		}
		else{
			var willStartTask = willStartTasks.getMaxPriorityTask();
			if (willStartTask.size()=1){
				return willStartTask[0];
			}
			return willStartTask.getTaskByDPvsPi();
		}
	}
	else if (system.status = Status#MCP or system.status = Status#HIGH){
		if (system.core.current_task <> null and system.core.current_task.criticality = Criticality#hi){
			var willStartTasksHigh = willStartTasks.select(e|e.criticality=Criticality#hi and (e.critical_section=null or e.critical_section.locked=false));
			return willStartTasksHigh.getMaxPriorityTask();
		}
		else{
			var willStartTasksHigh = willStartTasks.select(e|e.criticality=Criticality#hi);
			while(willStartTasksHigh.size()>0){
				var maxTaskPriorityHigh = willStartTasksHigh.getMaxPriorityTask();
				if (maxTaskPriorityHigh.size() = 1){
					var task = maxTaskPriorityHigh[0];
					if (task.critical_section = null or task.critical_section.locked = false or task.wcet_high-task.timeleft < task.cstime){
						task.IsMandatory = true;
						return task;
					}
					willStartTasksHigh.remove(task);
				}
				else{
					var task = maxTaskPriorityHigh.getTaskByDPvsPi();
					task.get_911();
					task.IsMandatory = true;
					return task;
				}
			}
			var willStartTasksLow = willStartTasks.select(e|e.criticality=Criticality#lo);
			while(willStartTasksLow.size()>0){
				var maxTaskPriorityLow = willStartTasksLow.getMaxPriorityTask();
				if (maxTaskPriorityLow.size()=1){
					var task = maxTaskPriorityLow[0];
					if ((system.status=Status#MCP and task.wcet_low-task.timeleft<task.cstime) or (system.status=Status#HIGH and task.notAvoid() and(system.core.current_task =null or system.core.current_task.wcet_low-system.core.current_task.timeleft>=system.core.current_task.cstime))) {
						return task;
					}
					willStartTasksLow.remove(task);
				}
				else{
					return maxTaskPriorityLow.getTaskByDPvsPi();
				}
			}
			return null;
		}
	}
}

operation Any get_911(){
	if(not self.isTypeOf(Task)){
		"911!".println();
		self.println();
		self.type.println();
	}
}

operation Any getTaskByDPvsPi(){
	return self.select(e|e.dynamic_priority <> e.priority).first();
}

operation Any getMaxPriorityTask(){
	return self.select(s|(self.count(e|e.dynamic_priority > s.dynamic_priority) = 0));
}

operation Task notAvoid(){
	return (not (self.IsHighTaskExisted() and self.shouldAvoid()));
}

operation Task shouldAvoid(){
	var start = system.core.time;
	var visionDistance = self.cstime;
	var HighTaskSequence = self.critical_section.tasks.select(e|e.criticality=Criticality#hi);
	var MaxVisionDistance = system.parameter.max_deadline;
	while((start+visionDistance-system.core.time)<MaxVisionDistance){
		var HighTaskCanSeen = getHighTaskInVisitionDistance(start, visionDistance);
		if (HighTaskCanSeen.size()>0){
			if (HighTaskCanSeen.includeSameCSIn(HighTaskSequence) or visionDistance > self.deadline - system.core.time ){
				return true;
			}
			else{
				start += visionDistance;
				visionDistance = updateVisionDistance(HighTaskCanSeen);
			}
		}
		else{
			return false;
		}
	}
	return true;
}

operation updateVisionDistance(HighTaskCanSeen){
	var distance = 0;
	for (task in HighTaskCanSeen){
		distance += task.wcet_high;
	}
}

operation getHighTaskInVisitionDistance(start, visionDistance){
	var highTasksSequence = new Sequence;
	for (task in system.tasks.select(e|e.criticality=Criticality#hi and e.state = WorkingState#unstart)){
		if ((start/task.deadline).asInteger()<>((start + visionDistance).asReal()/task.deadline).asInteger()){
			highTasksSequence.add(task);
		}
	}
	return highTasksSequence;
}

operation Any includeSameCSIn(HighTaskSequence){
	for (task in self){
		if (HighTaskSequence.includes(task)){
			return true;
		}
	}
	return false;
}

operation Task IsHighTaskExisted(){
	return (self.critical_section <> null and self.critical_section.criticality = Criticality#hi);
}

operation matchCriticalSectionCriticality(){
	for (cs in system.critical_sections){
		for (task in cs.tasks){
		 	if (task.criticality = Criticality#hi){
		 		cs.criticality = Criticality#hi;
		 		break;
		 	}
		}
	}
}

operation getCriticalSectionsCeilingPriority(){
	for (cs in system.critical_sections){
		 for (task in cs.tasks){
		 	if (cs.tasks.count(e|e.priority > task.priority) = 0){
		 		cs.ceiling_priority = task.priority;
		 	}
		 }
	}
}

operation matchCriticalSection(){
	for (i in Sequence{0..system.critical_sections.size()-1}){
		var cs = system.critical_sections.at(i);
		var task = system.tasks.at(i);
		cs.tasks.add(task);
		task.critical_section = cs;
	}
	for (task in system.tasks.select(e|e.name.asInteger()>system.critical_sections.size())){
		var randomNumber = getRandomInt(system.critical_sections.size()+1);
		if (randomNumber = 0){
			task.critical_section = null;
			task.cstime = 0;
		}
		else{
			var cs = system.critical_sections.at(randomNumber-1);
			cs.tasks.add(task);
			task.critical_section = cs;
		}
	}
}

operation getCriticalSection(){
	for (i in 1.to(system.parameter.critical_section_number)){
		var cs = createCriticalSection(i.asString());
	}
}

operation Core IsOpen(){
	return (self.current_task=null);
}

operation RunOver(){
	break;
}

operation IsAllTasksExecuted(){
	return (system.tasks.count(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging) = 0);
}

operation IsUnstartedTaskExisted(){
	return (not IsAllTasksExecuted());
}

operation hangCurrentTask(){
	system.core.current_task.state = WorkingState#hanging;
	system.core.current_task = null;
}

operation releaseCurrentTask(){
	if(system.core.current_task.criticality = Criticality#lo){
		system.parameter.LOtaskcount_scheduled++;
	}
	system.core.current_task.state = WorkingState#unstart;
	system.core.current_task.getTimeLeft();
	system.core.current_task = null;
}

operation IsNoTaskRunning(){
	return (not IsTaskRunning());
}

operation IsTaskRunning(){
	return (system.core.current_task <> null and system.core.current_task.timeleft > 0);
}

operation executeCurrentTask(){
	system.core.current_task.timeleft--;
	if (system.core.current_task.getTaskWCET() - system.core.current_task.timeleft = system.core.current_task.cstime){
		system.core.current_task.dynamic_priority = system.core.current_task.priority;
		system.core.current_task.unlock();
	}
}

operation Task getTaskWCET(){
	if(system.status = Status#LOW or self.criticality = Criticality#lo){
		return self.wcet_low;
	}
	else{
		return self.wcet_high;
	}
}

operation IsCurrentTaskShouldHang(){
	return (system.core.current_task<>null and system.status = Status#MCP and system.core.current_task.wcet_low-system.core.current_task.timeleft>=system.core.current_task.cstime and system.core.current_task.criticality = Criticality#lo);
}

operation getTaskOfMaxPriority(){
	var taskSequnece = system.tasks.select(e|e.state = WorkingState#unstart or e.state = WorkingState#hanging);
	for (task in taskSequnece){
		if (taskSequnece.count(e|e.dynamic_priority > task.dynamic_priority) = 0){
			return task;
		}
	}
}

operation tick(i) {
	system.core.time = i;
}

operation createTask(i : Integer){
	var task = new Task;
	task.name = i.asString();
	task.IsMandatory = false;
	task.state = WorkingState#unstart;
	system.tasks.add(task);
	return task;
}

operation getRandomTasks(){
	var n = system.parameter.task_number;
	var n_hi = system.parameter.high_task_number;
	var sum_u = system.parameter.CPU_rate;
	var needRedistribution = false;
	for (i in 1.to(system.parameter.task_number)) {
		createTask(i);
	}
	for (i in 1.to(system.parameter.high_task_number)){
		while(true){
			var task = system.tasks.at(getRandomInt(system.tasks.size()));
			if (task.criticality = Criticality#lo){
				task.criticality = Criticality#hi;
				break;
			}
		}
	}
	for (i in 1.to(system.parameter.task_number)) {
		var task = system.tasks.at(i-1);
		while(true){
			if (i < n) {
				task.utilisation = getRemainingUtilization(sum_u, n, i);
				sum_u -= task.utilisation;
			}
			else{
				task.utilisation = sum_u;
			}
			
			if (task.utilisation < 0) {
           		 needRedistribution = true;
           		 break;
      		 }
      		 
			task.period = getRandomIntWithFloor(system.parameter.max_deadline_limit, system.parameter.min_deadline_limit);
			task.deadline = task.period;
			task.wcet_low = (task.period * task.utilisation).getInteger();
			task.wcet_high = (task.wcet_low * system.parameter.high_vs_low).getInteger();
			task.getCstime();
			task.getTimeLeft();
			if (task.wcet_low <> 0 and task.wcet_high < task.deadline and system.tasks.count(e|e.deadline=task.deadline)=1){
				break;
			}
			else{
				sum_u += task.utilisation;
			}
		}
		
		if (needRedistribution) {
 		    for (task in system.tasks){
            	task.utilisation = 0;
        	}
       		sum_u = system.parameter.CPU_rate;
        	i = 1;
       		needRedistribution = false;
        	continue;
    	}
	}
	for (task in system.tasks){
		task.priority = system.tasks.count(e|e.deadline > task.deadline) + 1;
		task.dynamic_priority = task.priority;
	}
}

operation Task getTimeLeft(){
	if (system.status = Status#LOW or self.criticality = Criticality#lo){
		self.timeleft = self.wcet_low;
	}
	else{
		self.timeleft = self.wcet_high;
	}
}

operation Task getCstime(){
	if (system.status = Status#LOW or self.criticality = Criticality#lo){
		self.cstime = self.wcet_low.countCstime();
	}
	else{
		self.cstime = self.wcet_high.countCstime();
	}
}

operation Real countCstime(){
//	var randomCstime = (self*system.parameter.max_cstime_precent*getRandomDecimal()).getInteger();
	var randomCstime = (self*system.parameter.max_cstime_precent).getInteger();
	if (randomCstime <> 0){
		return randomCstime;
	}
	else{
		return 1;
	}
}

operation Real getInteger(){
	var selfInt = self.asInteger();
	var decimal = self - selfInt;
	if (decimal > 0.5){
		return selfInt+1;
	}
	else{
		return selfInt;
	}
}

operation getRandomInt(n){
	var rand = new Native("java.util.Random");
	return rand.nextInt(n);
}

operation getRandomIntWithFloor(n, floor_n){
	var number = getRandomInt(n);
	while(number <= floor_n){
		number = getRandomInt(n);
	}
	return number;
}

operation getRemainingUtilization(sum_u, n, i){
	return sum_u * (1 - getRandomDecimal().pow(1.0/(n-i)));
}

operation getRandomDecimal(){
	var rand = new Native("java.util.Random");
	return rand.nextInt(100000).asReal()/100000;
}

operation createCriticalSection(name){
	var criticalSection = new CriticalSection;
	criticalSection.name = name;
	criticalSection.locked = false;
	criticalSection.ceiling_priority = 0;
	system.critical_sections.add(criticalSection);
	return criticalSection;
}

operation processPrint(){
	if ((not system.parameter.print_process) or system.core.time < system.parameter.max_deadline){
		return null;
	}
	"____________________________________".println();
	("system status:"+system.status.name).println();
	("time:"+system.core.time).println();
	if(system.core.current_task.isDefined()){
		("current_task:"+system.core.current_task.name+";  dynamic_priority:"+system.core.current_task.dynamic_priority+";  criticality:"+system.core.current_task.criticality.name+";  timeleft:"+system.core.current_task.timeleft).println();
	}
	else{
		("current_task: null").println();
	}
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.name);
	("Hanging queue:   "+queue).println();
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.priority);
	("priority:        "+queue).println();
	var queue = system.tasks.select(e|e.state=WorkingState#hanging).collect(e|e.dynamic_priority);
	("dynamic_priority:"+queue).println();  
	var queue = system.tasks.select(e|e.state=WorkingState#hanging and e.critical_section<>null).collect(e|e.critical_section.locked);
	("semaphore_lock_status:"+queue).println();  
}

operation Result PrintResult(name : String){
	if (not system.parameter.print_result){
		return null;
	}
	("Result name: "+self.name).println();
	if (self.no_error){
		'Successfully.'.println();
	}
	else{
		('ERROR. Error time: '+self.error_time).println();
	}
	("Actual both occupancy rate:"+self.actual_occupancy_rate+"%").println();
	("Low occupancy rate:        "+self.low_occupancy_rate+"%").println();
	("High occupancy rate:       "+self.high_occupancy_rate+"%").println();
	("LOtask scheduled rate:       "+self.LOtask_scheduled_rate+"%").println();
	("HI_exec_rate_low:       "+self.HI_exec_rate_low+"%").println();
	"____________________________________".println();
}